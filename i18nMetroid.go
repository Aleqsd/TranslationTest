package main

import (
	"fmt"

	"github.com/BurntSushi/toml"
	"github.com/nicksnyder/go-i18n/v2/i18n"
	"golang.org/x/text/language"
)

var i18nbundle *i18n.Bundle

func init() {
	i18nbundle = i18n.NewBundle(language.English)
	i18nbundle.RegisterUnmarshalFunc("toml", toml.Unmarshal)
	i18nbundle.MustParseMessageFileBytes([]byte(`
HelloWorld = "Bonjour !"
CouldNotReadRequest = "Nous ne pouvons pas traiter ta demande."
InvalidTokenPassword = "Ce lien est expirÃ©. As-tu reÃ§u un lien plus rÃ©cent ?"
EmailTokenMismatch = "Email d'authentification expirÃ©. RÃ©essayer de vous inscrire depuis le dÃ©but."
InternalError = "Erreur interne."
EmailNicknameValidation = "L'email et le pseudo doivent contenir entre 3 et 12 caractÃ¨res."
EmailAlreadyTaken = "Ton enregistrement a dÃ©jÃ  Ã©tÃ© pris en compte "
NicknameAlreadyTaken = "Ce pseudo est dÃ©jÃ  utilisÃ© ğŸ˜¥"
EmailDoesNotExist = "Cet email n'existe pas ğŸ˜¥"
InvalidEmail = "Email non valide ğŸ˜¥"
InvalidNickname = "Pseudo non valide ğŸ˜¥"
NickNameValidation = "Ton pseudo ne peut pas commencer avec un chiffre ou contenir des espaces ou des caractÃ¨res spÃ©ciaux."
ThankYouWelcome = "Merci de t'Ãªtre enregistrÃ© sur notre liste de diffusion !"
notWhitelisted = "Tu n'as pas encore reÃ§u d'invitation. Contacte-nous Ã  contact@piepacker.com pour obtenir l'accÃ¨s."
passwordReset = "Email de rÃ©initialisation de mot de passe envoyÃ© pour "
ksBackerSignup = "Merci de t'Ãªtre enregistrÃ©"
ksBackerSecondPart = "Nous t'avons envoyÃ© un email pour te demander de confirmer ton inscription"
`), "fr.toml")
	i18nbundle.MustParseMessageFileBytes([]byte(`
HelloWorld = "Hello World!"
CouldNotReadRequest = "We cannot process your request."
InvalidTokenPassword = "This password link is expired. Have you received a more recent link?"
EmailTokenMismatch = "Expired email link. Please try again from to signup from the beginning."
InternalError = "Internal error."
EmailNicknameValidation = "Email and Nickname must contain between 3 and 12 characters."
EmailAlreadyTaken = "You are already registered"
NicknameAlreadyTaken = "This nickname is already taken ğŸ˜¢"
EmailDoesNotExist = "Email does not exist ğŸ˜¢"
InvalidEmail = "Invalid email ğŸ˜¢"
InvalidNickname = "Invalid nickname ğŸ˜¢"
notWhitelisted = "You have not yet been invited. Contact us at contact@piepacker.com to get access."
NickNameValidation = "Nickname cannot start with a number or contain spaces or symbols."
ThankYouWelcome = "Thank you for joining our mailing list!"
passwordReset = "Sent password reset email for "
ksBackerSignup = "Thank you for subscribing"
ksBackerSecondPart = "We have sent you an email to ask you confirm your subscription"
`), "en.toml")
	i18nbundle.MustParseMessageFileBytes([]byte(`
HelloWorld = "Â¡Hola mundo!"
CouldNotReadRequest = "No podemos procesar su solicitud"
InvalidTokenPassword = "Este link de contraseÃ±a ha expirado. Â¿Tienes un link mÃ¡s reciente?"
EmailTokenMismatch = "Enlace de correo electrÃ³nico caducado. Vuelve a intentarlo desde para registrarte desde el principio."
InternalError = "Error interno"
EmailNicknameValidation = "El email y nombre de usuario debe contener entre 3 y 12 caracteres"
EmailAlreadyTaken = "Ya estÃ¡s registrado"
NicknameAlreadyTaken = "Este nombre de usuario ya estÃ¡ en uso ğŸ˜¢"
EmailDoesNotExist = "El email no existe"
InvalidEmail = "email invÃ¡lido"
InvalidNickname = "Nombre de usuario invÃ¡lido"
notWhitelisted = "TodavÃ­a no has sido invitado. ContÃ¡ctanos a travÃ©s de contact@piepacker.com para conseguir acceso."
NickNameValidation = "El nombre de usuario no puede empezar con un nÃºmero, ni contener espacios o sÃ­mbolos."
ThankYouWelcome = "Â¡Gracias por unirte a nuestra lista de emails!"
passwordReset = "Enviado un correo electrÃ³nico de restablecimiento de contraseÃ±a para "
ksBackerSignup = "Gracias por suscribirse"
ksBackerSecondPart = "Le hemos enviado un correo electrÃ³nico para pedirle que confirme su suscripciÃ³n"
`), "es.toml")
}

func getText(localizer *i18n.Localizer, msg string) string {
	return localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: msg})
}

func translateInternalError(localizer *i18n.Localizer, err error) error {
	if err == nil {
		return nil
	}
	return fmt.Errorf("%s: %s", getText(localizer, "InternalError"), err.Error())
}
